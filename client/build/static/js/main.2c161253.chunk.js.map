{"version":3,"sources":["components/ItemTypes.js","service/serviceApi.js","components/Card.jsx","components/DropWrapper.jsx","components/Col.jsx","data/data.js","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["ServiceApi","fetch","response","responseJson","json","console","log","data","method","headers","body","JSON","stringify","category","content","type","_id","String","Card","props","close","a","document","getElementById","item","style","display","delete_entry","useDrag","ItemTypes","drag","ref","className","id","onClick","DropWrapper","onDrop","children","useDrop","accept","ITEM_TYPE","drop","monitor","collect","isOver","React","cloneElement","Col","categories","Board","useState","items","setItems","useEffect","length","get_all_data","all_cards","fetchData","insert_single_data","newCard","update_category","prevState","newItems","filter","i","concat","map","c","key","toUpperCase","App","DndProvider","backend","Backend","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c161253.chunk.js","sourcesContent":["export default {\n    CARD: \"card\"\n  }","export default class ServiceApi {\n    \n    static async get_all_data(){\n        try {\n            const response= await fetch(\"https://sage-dragon-278619.uc.r.appspot.com/api/all_cards\")\n            const responseJson= response.json();\n            console.log(responseJson)\n            return responseJson;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    static async insert_single_data(data){\n        try {\n            const response= await fetch(\"https://sage-dragon-278619.uc.r.appspot.com/api/card\", {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify ({\n                    category: data.category,\n                    content: data.content,\n                    type : data.type\n                })\n            })\n            const responseJson= response.json();\n            console.log(responseJson)\n            return responseJson;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    static async update_category(data){\n        console.log(data._id);\n        try {\n            const response= await fetch(\"https://sage-dragon-278619.uc.r.appspot.com/api/update/\"+ String(data._id), {\n                method: 'PATCH',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify ({\n                    category: data.category\n                })\n            })\n            const responseJson= response.json();\n            console.log(responseJson)\n            return responseJson;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    static async delete_entry(data){\n        console.log(data._id);\n        try {\n            const response= await fetch(\"https://sage-dragon-278619.uc.r.appspot.com/api/remove/\"+ String(data._id), {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }})\n            const responseJson= response.json();\n            console.log(responseJson)\n            return responseJson;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}","import React from 'react'\nimport ItemTypes from './ItemTypes'\nimport { useDrag } from 'react-dnd'\nimport { ServiceApi } from '../service'\n\nfunction Card(props) {\n\n  const close= async ()=>{\n     let tab=document.getElementById(props.item._id);\n      \n     tab.style.display=\"none\";\n     \n     await ServiceApi.delete_entry({_id: props.item._id});\n  }\n\n  const [, drag] = useDrag({\n    item: { type: ItemTypes.CARD, category: props.category, ...props.item },\n    /* collect: monitor => ({\n      isDragging: monitor.isDragging()\n    }) */\n  });\n\nreturn <div ref={drag} className=\"card\" id={props.item._id}>\n  {props.item.content}\n  {props.category !==\"rw\" ? <span className=\"close\" onClick={close}>x</span>:\" \"}\n  </div>\n \n}\n\nexport default Card\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport ITEM_TYPE from \"./ItemTypes\";\n\nconst DropWrapper = ({ onDrop, children, category }) => {\n\n    const [{ isOver }, drop] = useDrop({\n        accept: ITEM_TYPE.CARD,\n\n        drop: (item, monitor) => {\n            onDrop(item, monitor, category);\n        },\n\n        collect: monitor => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    return (\n        <div ref={drop} className={\"drop-wrapper\"}>\n            {React.cloneElement(children, { isOver })}\n        </div>\n    )\n};\n\nexport default DropWrapper;","import React from \"react\";\n\nconst Col = ({ isOver, children }) => {\n\n    return (\n        <div className='col'>\n            {children}\n        </div>\n    );\n};\n\nexport default Col;","const categories=[{\n    category: \"rw\"\n},{\n    category: \"c1\"\n},{\n    category: \"c2\"\n},{\n    category: \"c3\"\n},{\n    category: \"c4\"\n},{\n    category: \"c5\"\n}]\n\n\nexport {categories};","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport DropWrapper from \"./DropWrapper\";\nimport Col from \"./Col\";\nimport {categories} from \"../data\";\nimport { ServiceApi } from '../service';\n\n\nconst Board = () => {\n\n    const [items, setItems] = useState([]);\n    //const [index, setIndex] = useState(0);\n\n    useEffect(() => {\n        async function fetchData() {\n \n        if(items.length===0){\n            const all_cards= await ServiceApi.get_all_data();\n            setItems(all_cards);\n            //setIndex(parseInt(all_cards[all_cards.length-1].id));\n        }\n    }\n    fetchData();\n      });\n\n    const onDrop = async (item, monitor, category) => {\n\n        let newCard;\n        if(item.category===\"rw\"){\n            newCard=await ServiceApi.insert_single_data({\n                    category: category,\n                    content: item.content,\n                    type : item.type});\n                \n                item._id=newCard._id;\n            }\n            else {\n                await ServiceApi.update_category({\n                    _id: item._id,\n                    category: category});\n            }\n\n  \n        setItems(prevState=>{\n            //console.log(prevState)\n            let newItems;\n            if(item.category===\"rw\"){\n                //setIndex(index+1);\n                //console.log(item);\n                newItems = prevState\n                .filter(i => i._id !== item._id)\n                .concat({ ...item, category})\n                \n            } else {\n            newItems = prevState.filter(i => i._id !== item._id)\n            .concat({...item, category}); }\n            console.log(item);\n            return [...newItems];\n\n        });\n\n    };\n\n\n    return (\n        <div className={\"row\"}>\n            {categories.map(c => {\n                return (\n                 <div key={c.category} className=\"col-wrapper\">\n                    <div className=\"board\">\n\n                    <h2 className={\"col-header\"}>{c.category===\"rw\"? \"Rewards\": c.category.toUpperCase()}</h2>\n                    {c.category!==\"rw\" ? \n                        <DropWrapper onDrop={onDrop} category={c.category}>\n                            <Col>\n                                { items.filter(i => i.category === c.category)\n                                .map(i => <Card key={String(i._id)} item={i} category={c.category} />)\n                                }\n                            </Col>\n                        </DropWrapper>\n                        :<Col>\n                        { items.filter(i => i.category === c.category)\n                        .map(i => <Card key={String(i._id)} item={i} category={c.category} />)\n                        }\n                    </Col>}\n                </div>\n           </div>\n           )})}\n        </div>\n\n    );\n};\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport Board from './components/Board';\n\n\nfunction App () {\n\n  return (\n    <div  className=\"App\">\n      <main  className=\"class-wrapper\"> \n        <DndProvider backend={Backend}>\n\t        <Board/>\n\t\t\t\t</DndProvider>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}